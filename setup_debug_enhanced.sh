#!/bin/bash

# setup_debug_enhanced.sh - Script de Setup do Debug Server Aprimorado
# Santo Graal Prod√≠gio - Sistema de Debug Avan√ßado

echo "üöÄ Configurando Enhanced Debug Server - Santo Graal Prod√≠gio"
echo "============================================================"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${CYAN}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "src/main.py" ]; then
    print_error "Arquivo src/main.py n√£o encontrado!"
    print_error "Execute este script na raiz do projeto Backend/"
    exit 1
fi

print_status "Verificando estrutura do projeto..."

# Verificar depend√™ncias Python
print_status "Verificando depend√™ncias Python..."

REQUIRED_PACKAGES=(
    "flask"
    "psutil"
    "requests"
    "werkzeug"
)

MISSING_PACKAGES=()

for package in "${REQUIRED_PACKAGES[@]}"; do
    if ! python3 -c "import $package" 2>/dev/null; then
        MISSING_PACKAGES+=($package)
    fi
done

if [ ${#MISSING_PACKAGES[@]} -gt 0 ]; then
    print_warning "Instalando depend√™ncias faltantes: ${MISSING_PACKAGES[*]}"
    pip3 install "${MISSING_PACKAGES[@]}"
    
    if [ $? -eq 0 ]; then
        print_success "Depend√™ncias instaladas com sucesso!"
    else
        print_error "Falha ao instalar depend√™ncias!"
        exit 1
    fi
else
    print_success "Todas as depend√™ncias est√£o instaladas!"
fi

# Criar diret√≥rios necess√°rios
print_status "Criando diret√≥rios necess√°rios..."

DIRECTORIES=(
    "logs"
    "debug_data"
    "temp"
)

for dir in "${DIRECTORIES[@]}"; do
    if [ ! -d "$dir" ]; then
        mkdir -p "$dir"
        print_success "Diret√≥rio $dir criado"
    fi
done

# Verificar se o Flutter Web build existe
print_status "Verificando Flutter Web build..."

if [ ! -d "static" ]; then
    print_warning "Diret√≥rio static/ n√£o encontrado!"
    print_warning "Criando estrutura b√°sica..."
    mkdir -p static/web
    
    # Criar index.html b√°sico se n√£o existir
    if [ ! -f "static/web/index.html" ]; then
        cat > static/web/index.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Flutter Web App</title>
</head>
<body>
    <div id="loading">
        <h2>Flutter Web App</h2>
        <p>Carregando aplica√ß√£o...</p>
    </div>
</body>
</html>
EOF
        print_success "Arquivo static/web/index.html criado"
    fi
else
    print_success "Diret√≥rio static/ encontrado!"
fi

# Criar arquivo de configura√ß√£o do debug
print_status "Criando arquivo de configura√ß√£o..."

cat > debug_config.json << EOF
{
    "debug_server": {
        "host": "0.0.0.0",
        "port": 8080,
        "auto_reload": true,
        "log_level": "INFO"
    },
    "main_app": {
        "host": "localhost",
        "port": 5000,
        "path": "src"
    },
    "monitoring": {
        "auto_discover_routes": true,
        "auto_discover_models": true,
        "metrics_interval": 30,
        "log_rotation_size": "2MB",
        "log_backup_count": 5
    },
    "security": {
        "allowed_commands": [
            "ls", "pwd", "ps", "df", "free", "uname", "whoami",
            "curl", "wget", "ping", "netstat", "ss",
            "python", "pip", "flask", "gunicorn",
            "git", "cat", "head", "tail", "grep",
            "find", "which", "echo", "date", "uptime"
        ],
        "command_timeout": 30,
        "max_log_lines": 1000
    }
}
EOF

print_success "Arquivo debug_config.json criado!"

# Criar script de inicializa√ß√£o r√°pida
print_status "Criando script de inicializa√ß√£o r√°pida..."

cat > start_debug.sh << 'EOF'
#!/bin/bash

# start_debug.sh - Inicializa√ß√£o R√°pida do Debug Server

echo "üöÄ Iniciando Enhanced Debug Server..."

# Verificar se o servidor principal est√° rodando
if curl -s http://localhost:5000/api/debug/status > /dev/null 2>&1; then
    echo "‚úÖ Servidor principal detectado em localhost:5000"
else
    echo "‚ö†Ô∏è  Servidor principal n√£o detectado em localhost:5000"
    echo "   Certifique-se de que src/main.py est√° rodando"
fi

# Iniciar debug server
python3 debug_server_enhanced.py --port 8080 --host 0.0.0.0

EOF

chmod +x start_debug.sh
print_success "Script start_debug.sh criado!"

# Criar script de parada
print_status "Criando script de parada..."

cat > stop_debug.sh << 'EOF'
#!/bin/bash

# stop_debug.sh - Parar Debug Server

echo "üõë Parando Enhanced Debug Server..."

# Encontrar e matar processos do debug server
PIDS=$(ps aux | grep "debug_server_enhanced.py" | grep -v grep | awk '{print $2}')

if [ -z "$PIDS" ]; then
    echo "‚ÑπÔ∏è  Nenhum processo do debug server encontrado"
else
    for PID in $PIDS; do
        echo "üî™ Matando processo $PID"
        kill -TERM $PID
        sleep 2
        
        # Verificar se ainda est√° rodando
        if kill -0 $PID 2>/dev/null; then
            echo "üíÄ For√ßando parada do processo $PID"
            kill -KILL $PID
        fi
    done
    echo "‚úÖ Debug server parado!"
fi

EOF

chmod +x stop_debug.sh
print_success "Script stop_debug.sh criado!"

# Criar script de status
print_status "Criando script de status..."

cat > debug_status.sh << 'EOF'
#!/bin/bash

# debug_status.sh - Status do Debug Server

echo "üìä Status do Enhanced Debug Server"
echo "=================================="

# Verificar se est√° rodando
PIDS=$(ps aux | grep "debug_server_enhanced.py" | grep -v grep | awk '{print $2}')

if [ -z "$PIDS" ]; then
    echo "‚ùå Debug Server: OFFLINE"
else
    echo "‚úÖ Debug Server: ONLINE"
    for PID in $PIDS; do
        echo "   PID: $PID"
        echo "   Mem√≥ria: $(ps -p $PID -o rss= | awk '{print $1/1024 " MB"}')"
        echo "   CPU: $(ps -p $PID -o %cpu= | awk '{print $1"%"}')"
    done
fi

# Verificar conectividade
echo ""
echo "üåê Conectividade:"

if curl -s http://localhost:8080/api/debug/status > /dev/null 2>&1; then
    echo "‚úÖ Debug API: http://localhost:8080/api/debug/status"
else
    echo "‚ùå Debug API: N√£o acess√≠vel"
fi

if curl -s http://localhost:8080/debug-panel > /dev/null 2>&1; then
    echo "‚úÖ Debug Panel: http://localhost:8080/debug-panel"
else
    echo "‚ùå Debug Panel: N√£o acess√≠vel"
fi

# Verificar logs
echo ""
echo "üìù Logs:"
if [ -f "debug_enhanced.log" ]; then
    LOG_SIZE=$(du -h debug_enhanced.log | cut -f1)
    LOG_LINES=$(wc -l < debug_enhanced.log)
    echo "‚úÖ Log file: debug_enhanced.log ($LOG_SIZE, $LOG_LINES linhas)"
    echo "   √öltimas 3 linhas:"
    tail -3 debug_enhanced.log | sed 's/^/   /'
else
    echo "‚ùå Log file: N√£o encontrado"
fi

EOF

chmod +x debug_status.sh
print_success "Script debug_status.sh criado!"

# Criar arquivo README para o debug
print_status "Criando documenta√ß√£o..."

cat > DEBUG_README.md << 'EOF'
# Enhanced Debug Server - Santo Graal Prod√≠gio

Sistema de debug avan√ßado com auto-descoberta de rotas e modelos.

## üöÄ Inicializa√ß√£o R√°pida

```bash
# Iniciar debug server
./start_debug.sh

# Verificar status
./debug_status.sh

# Parar debug server
./stop_debug.sh
```

## üåê URLs de Acesso

- **Debug Panel**: http://localhost:8080/debug-panel
- **Flutter App**: http://localhost:8080/
- **API Status**: http://localhost:8080/api/debug/status
- **Rotas**: http://localhost:8080/api/debug/routes
- **Modelos**: http://localhost:8080/api/debug/models

## üîß Funcionalidades

### Auto-descoberta
- ‚úÖ Descoberta autom√°tica de rotas Flask
- ‚úÖ Descoberta autom√°tica de modelos de dados
- ‚úÖ Mapeamento de blueprints
- ‚úÖ An√°lise de par√¢metros e documenta√ß√£o

### Testes
- ‚úÖ Teste individual de rotas
- ‚úÖ Teste em lote de todas as rotas
- ‚úÖ Testes de conectividade
- ‚úÖ Testes de mem√≥ria
- ‚úÖ Health checks completos

### Monitoramento
- ‚úÖ M√©tricas de sistema em tempo real
- ‚úÖ Monitoramento de CPU e mem√≥ria
- ‚úÖ Logs estruturados com rota√ß√£o
- ‚úÖ Hist√≥rico de comandos

### Terminal
- ‚úÖ Execu√ß√£o remota de comandos
- ‚úÖ Lista de comandos permitidos
- ‚úÖ Timeout de seguran√ßa
- ‚úÖ Hist√≥rico de execu√ß√µes

## üìä Interface Web

O painel web oferece:

1. **Dashboard**: Status geral do sistema
2. **Rotas**: Auto-descoberta e teste de endpoints
3. **Modelos**: An√°lise de estruturas de dados
4. **Terminal**: Execu√ß√£o remota de comandos
5. **Testes**: Suite completa de testes
6. **Logs**: Visualiza√ß√£o em tempo real
7. **M√©tricas**: Gr√°ficos de performance

## ‚öôÔ∏è Configura√ß√£o

Edite `debug_config.json` para personalizar:

- Portas e hosts
- Comandos permitidos
- Intervalos de monitoramento
- Configura√ß√µes de log

## üîí Seguran√ßa

- Lista restrita de comandos permitidos
- Timeout para execu√ß√µes
- Logs de todas as a√ß√µes
- Valida√ß√£o de entrada

## üìù Logs

- Arquivo: `debug_enhanced.log`
- Rota√ß√£o autom√°tica (2MB)
- 5 backups mantidos
- N√≠veis: DEBUG, INFO, WARNING, ERROR

## üêõ Troubleshooting

### Debug server n√£o inicia
```bash
# Verificar depend√™ncias
pip3 install flask psutil requests werkzeug

# Verificar porta
netstat -tlnp | grep :8080
```

### Rotas n√£o descobertas
```bash
# Verificar se main.py est√° acess√≠vel
python3 -c "from src.main import app; print('OK')"
```

### Testes falhando
```bash
# Verificar se servidor principal est√° rodando
curl http://localhost:5000/api/debug/status
```

## üìû Suporte

Para problemas ou sugest√µes, verifique:
1. Logs em `debug_enhanced.log`
2. Status com `./debug_status.sh`
3. Configura√ß√£o em `debug_config.json`
EOF

print_success "Documenta√ß√£o DEBUG_README.md criada!"

# Verificar integridade dos arquivos criados
print_status "Verificando integridade dos arquivos..."

FILES_TO_CHECK=(
    "debug_server_enhanced.py"
    "debug_config.json"
    "start_debug.sh"
    "stop_debug.sh"
    "debug_status.sh"
    "DEBUG_README.md"
)

ALL_OK=true

for file in "${FILES_TO_CHECK[@]}"; do
    if [ -f "$file" ]; then
        print_success "‚úÖ $file"
    else
        print_error "‚ùå $file n√£o encontrado!"
        ALL_OK=false
    fi
done

# Teste r√°pido de sintaxe Python
print_status "Testando sintaxe do debug server..."

if python3 -m py_compile debug_server_enhanced.py; then
    print_success "‚úÖ Sintaxe Python v√°lida!"
else
    print_error "‚ùå Erro de sintaxe no debug server!"
    ALL_OK=false
fi

# Resumo final
echo ""
echo "============================================================"
if [ "$ALL_OK" = true ]; then
    print_success "üéâ Setup conclu√≠do com sucesso!"
    echo ""
    echo -e "${CYAN}Pr√≥ximos passos:${NC}"
    echo "1. Execute: ${YELLOW}./start_debug.sh${NC}"
    echo "2. Acesse: ${YELLOW}http://localhost:8080/debug-panel${NC}"
    echo "3. Verifique: ${YELLOW}./debug_status.sh${NC}"
    echo ""
    echo -e "${GREEN}Enhanced Debug Server - Santo Graal Prod√≠gio est√° pronto!${NC}"
else
    print_error "‚ùå Setup conclu√≠do com erros!"
    echo "Verifique os erros acima e tente novamente."
    exit 1
fi

echo "============================================================"

